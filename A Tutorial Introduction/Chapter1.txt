1 GETTING STARTED

We need to compile the .c program so we can run it. In linux:

  $ gcc program.c -o program
  $ ./program

- A C program consists of functions and variables.
- The program begins executing at the beginning of the main function


  #include <stdio.h>

- Tells the compiler to include information about the standard input-output library.

1.2 VARIABLES AND ARITHMETIC EXPRESSIONS

- We use /**/ to write comments
- All C variables must be declared before they are used. It has its properties, with their type:

  int fahr, celsius;

  int: integer
  float: floating point
  char: character - a single byte
  short: short integer
  long: long integer
  double: double-precision floating point

- We can create a loop with the while statement:

  while (fahr <= upper) {
  	...
  }

- The condition in parentheses is tested. If true, the body of the loop is executed. Then it is retested until the condition becomes False.
- If the while has only a single statement, then the braces are unecessary. The statement needs to be indented:

  while (i < j)
  	i = 2 * i;

- To print variables inside a string, we use this:

  printf("%d", i); /*%d specifies an integer argument*/

- If we wanted to print a floating point number:

  printf(""%3.1f", i) /*at least three characters wide, with one digit after the decimal point

1.3 THE FOR STATEMENT

    #include <stdio.h>

    /* print Fahrenheit-Celsius table */
    main()
    {
        int fahr;

        for (fahr = 0; fahr <= 300; fahr = fahr + 20)
            printf("%3d %6.1f\n", fahr, (5.0/9.0)*(fahr-32));

- The for statement is a loop, a generalization of the while. Within the parentheses, there are three parts, separeted by semicolons.
- The inicialization is done once, before the loop proper is entered:

    fahr = 0

- The second part is the test/condition that controls the loop; the loop runs if it is true:

    fahr <= 300

- Then, there is the increment step:

    fahr = fahr + 20

- The loop terminates if the condition has become false.

1.4 Symbolic Constants

- We can use symbolic names or symbolic constants to be easier to deal with numbers and other characters

    #define name replacement text

1.5 Character Input and Output

- getchar reads the next input character from a text stream and returns that as its value.
- It is possible to contain it in a variable:

    c = getchar()

- putchar prints a character each time it is called:

    putchar(c)
