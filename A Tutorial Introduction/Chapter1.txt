1 GETTING STARTED

We need to compile the .c program so we can run it. In linux:

  $ gcc program.c -o program
  $ ./program

- A C program consists of functions and variables.
- The program begins executing at the beginning of the main function


  #include <stdio.h>

- Tells the compiler to include information about the standard input-output library.

1.2 VARIABLES AND ARITHMETIC EXPRESSIONS

- We use /**/ to write comments
- All C variables must be declared before they are used. It has its properties, with their type:

  int fahr, celsius;

  int: integer
  float: floating point
  char: character - a single byte
  short: short integer
  long: long integer
  double: double-precision floating point

- We can create a loop with the while statement:

  while (fahr <= upper) {
  	...
  }

- The condition in parentheses is tested. If true, the body of the loop is executed. Then it is retested until the condition becomes False.
- If the while has only a single statement, then the braces are unecessary. The statement needs to be indented:

  while (i < j)
  	i = 2 * i;

- To print variables inside a string, we use this:

  printf("%d", i); /*%d specifies an integer argument*/

- If we wanted to print a floating point number:

  printf(""%3.1f", i) /*at least three characters wide, with one digit after the decimal point

1.3 THE FOR STATEMENT

    #include <stdio.h>

    /* print Fahrenheit-Celsius table */
    main()
    {
        int fahr;

        for (fahr = 0; fahr <= 300; fahr = fahr + 20)
            printf("%3d %6.1f\n", fahr, (5.0/9.0)*(fahr-32));

- The for statement is a loop, a generalization of the while. Within the parentheses, there are three parts, separeted by semicolons.
- The inicialization is done once, before the loop proper is entered:

    fahr = 0

- The second part is the test/condition that controls the loop; the loop runs if it is true:

    fahr <= 300

- Then, there is the increment step:

    fahr = fahr + 20

- The loop terminates if the condition has become false.

1.4 Symbolic Constants

- We can use symbolic names or symbolic constants to be easier to deal with numbers and other characters

    #define name replacement text

1.5 Character Input and Output

- getchar reads the next input character from a text stream and returns that as its value.
- It is possible to contain it in a variable:

    c = getchar()

- putchar prints a character each time it is called:

    putchar(c)

1.7 FUNCTIONS

- A function provides a convenient way to encapsulate some computation, which can then be used
without worrying about its implementation
    - we can ignore how a job is done, focusing only on what is done.

- A function definition has this form:

    return-type function-name(parameter declarations, if any)
    {
        declarations
        statements
    }

- Function definitions can appear in any order, and in one source file or several, althoug it cant
be split between files

- In powerfunction.c, the function power is called twice by main:

    printf("%d %d %d\n", i, power(2,i), power(-3,i));

- Each call passes two arguments to power, that returns an integer.

- The firts line of power declares the parameter types and names, and the type of the result returned

    int power(int base, int n)

- The names used for its parameters are local to power.

- The value that power computes is returned to main by the return statement. Any expression may follow
return.
    - A function need to return a value. This is also true for main.
    - Typically, a return value of zero implies normal termination; non-zero means erroneous terminantion

- At the beginning of powerfunction.c, we have a function prototype:

    int power(int m, int n);

- It says that power is a function that expects two int arguments and returns an int.

1.8 ARGUMENTS - CALL BY VALUE

- In C, all function arguments are passed "by value".
    - This means that the called function is given the values of its arguments in temporary variables rather than the originals.
- In C, the called function cannot directly alter a variable in the calling function;
    - it can only alter its private, temporary copy.

1.9 CHARACTER ARRAYS

- The most common type of array is the array of characters. We created longestLine.c to read a set of text lines and prints the longest
- In

	int getline(char s[], int lim)

  we need to supply the size of the array s to set aside storage; this is done in main.
 - The function copy() don't return a value; that's why it's return type is void.
 - getline() puts the character '\0' (the null character) at the end of the array it is creating, to mark the end of the string of characters.
 - In C, a string "hello\n" is stored in an array of characters containing the characters of the string and  terminated with a '\0' to mark the end.
 	- h | e | l | l | o | \n | \0
